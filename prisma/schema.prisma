// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// admin user
model Admin {
  id              String   @id @unique @default(cuid())
  email           String   @unique
  password        String
  userName        String
  firstName       String
  lastName        String
  otherName       String?
  phone           String
  salt            String?
  isActive        Boolean  @default(true)
  isEmailVerified Boolean  @default(false)
  role            Role     @default(ADMIN)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// vendor user
model Vendor {
  id              String   @id @unique @default(cuid())
  email           String   @unique
  password        String
  userName        String
  firstName       String
  lastName        String
  otherName       String?
  phone           String
  salt            String?
  stores          Store[]
  isActive        Boolean  @default(true)
  isEmailVerified Boolean  @default(false)
  role            Role     @default(VENDOR)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// user or customer
model User {
  id              String   @id @unique @default(cuid())
  email           String   @unique
  userName        String
  firstName       String?
  lastName        String?
  otherName       String?
  salt            String?
  phone           String
  password        String
  cart            Cart[]
  Orders          Order[]
  isActive        Boolean  @default(true)
  isEmailVerified Boolean  @default(false)
  role            Role     @default(USER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// a store that can sell products
model Store {
  id         String          @id @unique @default(cuid())
  name       String
  about      String
  phone      String
  address    String
  location   String
  categories StoreCategory[]
  products   Product[]
  vendor     Vendor          @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId   String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

// store categories
model StoreCategory {
  id          String   @id @unique @default(cuid())
  name        String   @unique
  description String?
  storeId     String?
  store       Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// products that can be sold
model Product {
  id          String            @id @unique @default(cuid())
  name        String
  description String
  price       Json
  quantity    Int
  rating      Float
  images      File[]
  status      ProductStatus     @default(ACTIVE)
  storeId     String
  store       Store             @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories  ProductCategory[]
  orderItems  OrderItem[]
  cart        Cart[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// product category
model ProductCategory {
  id        String   @id @unique @default(cuid())
  name      String   @unique
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// cart of products for a user
model Cart {
  id        String   @id @unique @default(cuid())
  quantity  Int
  price     Float
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// order of products
model Order {
  id            String      @id @unique @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  address       String
  paymentMethod String
  paidAmount    Float       @default(0.0)
  deliveryFee   Float       @default(0.0)
  totalPrice    Float
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// order items
model OrderItem {
  id        String   @id @unique @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// image files
model File {
  id        String   @id @unique @default(cuid())
  name      String
  type      String
  size      Float
  path      String
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enum of product status
enum ProductStatus {
  DRAFT
  ACTIVE
  DELETED
}

// role enum
enum Role {
  ADMIN
  VENDOR
  USER
}
